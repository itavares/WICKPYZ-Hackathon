{"ast":null,"code":"import _objectSpread from \"/home/sumb0dy/Desktop/hackathon/WICKPYZ-Hackathon/healthrx/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore'; // const firebase = require('firebase');\n// require('firebase/firestore');\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC3ZH1hjXHPZOtmSh71qR9U4BvjqDLEwBQ\",\n  authDomain: \"healthrx-c62d2.firebaseapp.com\",\n  databaseURL: \"https://healthrx-c62d2.firebaseio.com\",\n  projectId: \"healthrx-c62d2\",\n  storageBucket: \"healthrx-c62d2.appspot.com\",\n  messagingSenderId: \"883168315312\",\n  appId: \"1:883168315312:web:bb63bb763760ed6a\"\n}; //\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).get().then(snapshot => {\n          const dbUser = snapshot.data(); // merge auth and db user\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            username: authUser.email\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.patients = uid => this.db.doc(\"patients/\".concat(uid));\n\n    this.patients = () => this.db.collection('patients');\n\n    app.initializeApp(firebaseConfig);\n    this.fieldValue = app.firestore.FieldValue;\n    this.auth = app.auth();\n    this.db = app.database();\n    this.db = app.firestore();\n  } // *** AUTH  API ***\n  // API to create user\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/home/sumb0dy/Desktop/hackathon/WICKPYZ-Hackathon/healthrx/src/Firebase/Firebase.js"],"names":["app","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","get","then","snapshot","dbUser","data","username","patients","db","doc","collection","initializeApp","fieldValue","firestore","FieldValue","database"],"mappings":";AAAA,OAAOA,GAAP,MAAe,cAAf;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,OAAO,oBAAP,C,CAIA;AACA;;AAGA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,gCAFS;AAGrBC,EAAAA,WAAW,EAAE,uCAHQ;AAIrBC,EAAAA,SAAS,EAAE,gBAJU;AAKrBC,EAAAA,aAAa,EAAE,4BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE;AAPc,CAAvB,C,CAUA;;AACA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AAAA,SAoBdC,gCApBc,GAoBqB,CAACC,KAAD,EAAQC,QAAR,KACjC,KAAKC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,EAAgDC,QAAhD,CArBY;;AAAA,SAuBdG,4BAvBc,GAuBiB,CAACJ,KAAD,EAAQC,QAAR,KAC7B,KAAKC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,EAA4CC,QAA5C,CAxBY;;AAAA,SA2BdK,SA3Bc,GA2BF,MAAM,KAAKJ,IAAL,CAAUK,OAAV,EA3BJ;;AAAA,SAgCZC,kBAhCY,GAgCS,CAACC,IAAD,EAAOC,QAAP,KACrB,KAAKR,IAAL,CAAUS,kBAAV,CAA6BC,QAAQ,IAAI;AACvC,UAAIA,QAAJ,EAAc;AACZ,aAAKC,IAAL,CAAUD,QAAQ,CAACE,GAAnB,EACGC,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,gBAAMC,MAAM,GAAGD,QAAQ,CAACE,IAAT,EAAf,CADgB,CAGhB;;AACAP,UAAAA,QAAQ;AACNE,YAAAA,GAAG,EAAEF,QAAQ,CAACE,GADR;AAENd,YAAAA,KAAK,EAAEY,QAAQ,CAACZ,KAFV;AAGNoB,YAAAA,QAAQ,EAAER,QAAQ,CAACZ;AAHb,aAIHkB,MAJG,CAAR;AAOAT,UAAAA,IAAI,CAACG,QAAD,CAAJ;AACD,SAdH;AAeD,OAhBD,MAgBO;AACLF,QAAAA,QAAQ;AACT;AACF,KApBD,CAjCY;;AAAA,SA2DZW,QA3DY,GA2DDP,GAAG,IAAI,KAAKQ,EAAL,CAAQC,GAAR,oBAAwBT,GAAxB,EA3DN;;AAAA,SA6DZO,QA7DY,GA6DD,MAAM,KAAKC,EAAL,CAAQE,UAAR,CAAmB,UAAnB,CA7DL;;AAEZpC,IAAAA,GAAG,CAACqC,aAAJ,CAAkBpC,cAAlB;AAEA,SAAKqC,UAAL,GAAkBtC,GAAG,CAACuC,SAAJ,CAAcC,UAAhC;AACA,SAAK1B,IAAL,GAAYd,GAAG,CAACc,IAAJ,EAAZ;AACA,SAAKoB,EAAL,GAAUlC,GAAG,CAACyC,QAAJ,EAAV;AAEA,SAAKP,EAAL,GAAUlC,GAAG,CAACuC,SAAJ,EAAV;AAKC,GAdU,CAiBX;AAGF;;;AApBa;;AAkEf,eAAe9B,QAAf","sourcesContent":["import app from'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore';\n\n\n\n// const firebase = require('firebase');\n// require('firebase/firestore');\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC3ZH1hjXHPZOtmSh71qR9U4BvjqDLEwBQ\",\n  authDomain: \"healthrx-c62d2.firebaseapp.com\",\n  databaseURL: \"https://healthrx-c62d2.firebaseio.com\",\n  projectId: \"healthrx-c62d2\",\n  storageBucket: \"healthrx-c62d2.appspot.com\",\n  messagingSenderId: \"883168315312\",\n  appId: \"1:883168315312:web:bb63bb763760ed6a\"\n};\n\n//\nclass Firebase {\n  constructor() {\n    \n    app.initializeApp(firebaseConfig);   \n    \n    this.fieldValue = app.firestore.FieldValue;\n    this.auth = app.auth();\n    this.db = app.database();\n\n    this.db = app.firestore();\n\n    \n\n\n    }\n    \n \n    // *** AUTH  API ***\n\n\n  // API to create user\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  //f no user is authenticated, nothing will happen when this function is called\n  doSignOut = () => this.auth.signOut();\n\n\n    // *** User API ***\n\n    onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .get()\n          .then(snapshot => {\n            const dbUser = snapshot.data();\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              username: authUser.email,\n              ...dbUser,\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n\n\n\n\n    patients = uid => this.db.doc(`patients/${uid}`);\n\n    patients = () => this.db.collection('patients');\n    \n}\n\nexport default Firebase;\n\n"]},"metadata":{},"sourceType":"module"}